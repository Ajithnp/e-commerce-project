
<%- include('../partials/admin/header') %>
<div class="coupon-add-container">
    <div class="page-header">
        <h1 class="page-title">Add New Coupon</h1>
        <a href="/api/v1/admin/coupons" class="back-btn">
            <i class="fas fa-arrow-left"></i> Back to Coupons
        </a>
    </div>

    <div class="coupon-form-container">
        <form id="coupon-form" class="coupon-form">
            <div class="form-row">
                <div class="form-group">
                    <label for="code">Coupon Code*</label>
                    <input type="text" id="code" name="code" required>
                    <span id="code-error" class="error-message"></span>
                </div>

                <div class="form-group">
                    <label for="discountType">Discount Type*</label>
                    <select id="discountType" name="discountType" required>
                        <option value="">Select Discount Type</option>
                        <option value="percentage">Percentage</option>
                        <option value="fixed">Fixed Amount</option>
                    </select>
                </div>
            </div>

            <div class="form-row">
                <div class="form-group">
                    <label for="minDiscountValue">Discount Value*</label>
                    <input type="number" id="minDiscountValue" name="minDiscountValue" min="0" step="0.01" required>
                    <span id="minDiscount-error" class="error-message"></span>
                </div>
                <div class="form-group">
                    <label for="maxDiscountValue">Maximum Discount Value*</label>
                    <input type="number" id="maxDiscountValue" name="maxDiscountValue" min="0" step="0.01" required>
                    <span id="maxDiscount-error" class="error-message"></span>
                </div>
            </div>

            <div class="form-row">
                <div class="form-group">
                    <label for="expiryDate">Expiry Date*</label>
                    <input type="date" id="expiryDate" name="expiryDate" required>
                    <span id="date-error" class="error-message"></span>
                </div>
                <div class="form-group">
                    <label for="usageLimit">Usage Limit</label>
                    <input type="number" id="usageLimit" name="usageLimit" min="1" value="1">
                    <span id="limit-error" class="error-message"></span>
                </div>
            </div>


            <div class="form-group">
                <label for="description">Description*</label>
                <textarea id="description" name="description" required></textarea>
                <span id="description-error" class="error-message"></span>
            </div>

            <div class="form-row">
                <div class="form-group">
                    <label for="conditions">Conditions*</label>
                    <select id="conditions" name="conditions" required>
                        <option value="">Select Condition</option>
                        <option value="minimum_purchase">Minimum Purchase</option>
                        <option value="first_purchase">First Purchase</option>
                        
                    </select>
                </div>
                <div class="form-group" id="minimumPurchaseGroup" style="display: none;">
                    <label for="minimumPurchaseAmount">Minimum Purchase Amount*</label>
                    <input type="number" id="minimumPurchaseAmount" name="minimumPurchaseAmount" min="0" step="0.01">
                    <span id="minPurchase-error" class="error-message"></span>
                </div>
            </div>

            <div class="form-actions">
                <button type="reset" class="reset-btn">Reset</button>
                <button type="submit" class="submit-btn">Add Coupon</button>
            </div>
        </form>
    </div>
</div>

<style>
    .coupon-add-container {
        padding: 20px;
        background-color: #1f2937;
        color: #E5E7EB;
        min-height: 100vh;
    }

    .page-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

    .page-title {
        font-size: 24px;
        color: white;
    }
    #minimumPurchaseGroup {
        transition: all 0.3s ease;
    }

    .back-btn {
        display: inline-flex;
        align-items: center;
        padding: 8px 16px;
        background-color: #374151;
        color: white;
        text-decoration: none;
        border-radius: 4px;
        font-weight: 500;
        transition: background-color 0.2s;
    }

    .back-btn:hover {
        background-color: #4B5563;
    }

    .back-btn i {
        margin-right: 8px;
    }

    .coupon-form-container {
        background-color: #111827;
        border-radius: 8px;
        padding: 24px;
    }

    .coupon-form {
        display: grid;
        gap: 24px;
    }

    .form-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 24px;
    }
    .error-message {
        color: red;
    
    }
    .form-group {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

    .form-group label {
        color: #E5E7EB;
        font-weight: 500;
    }

    .form-group input[type="text"],
    .form-group input[type="number"],
    .form-group input[type="date"],
    .form-group select,
    .form-group textarea {
        padding: 8px 12px;
        background-color: #374151;
        border: 1px solid #4B5563;
        border-radius: 4px;
        color: white;
        font-size: 14px;
    }

    .form-group input:focus,
    .form-group select:focus,
    .form-group textarea:focus {
        outline: none;
        border-color: #3B82F6;
    }

    .form-group textarea {
        height: 100px;
        resize: vertical;
    }

    .toggle-switch {
        position: relative;
        display: inline-block;
        width: 60px;
        height: 34px;
    }

    .toggle-switch input {
        opacity: 0;
        width: 0;
        height: 0;
    }

    .toggle-switch label {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #4B5563;
        transition: .4s;
        border-radius: 34px;
    }

    .toggle-switch label:before {
        position: absolute;
        content: "";
        height: 26px;
        width: 26px;
        left: 4px;
        bottom: 4px;
        background-color: white;
        transition: .4s;
        border-radius: 50%;
    }

    .toggle-switch input:checked + label {
        background-color: #3B82F6;
    }

    .toggle-switch input:checked + label:before {
        transform: translateX(26px);
    }

    .form-actions {
        display: flex;
        justify-content: flex-end;
        gap: 12px;
    }

    .submit-btn, .reset-btn {
        padding: 8px 16px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
        font-weight: 500;
        transition: opacity 0.2s;
    }

    .submit-btn {
        background-color: #3B82F6;
        color: white;
    }

    .reset-btn {
        background-color: #4B5563;
        color: white;
    }

    .submit-btn:hover, .reset-btn:hover {
        opacity: 0.9;
    }

    @media (max-width: 768px) {
        .form-row {
            grid-template-columns: 1fr;
        }
    }
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('coupon-form');
    const conditionsSelect = document.getElementById('conditions');
    const minimumPurchaseGroup = document.getElementById('minimumPurchaseGroup');
    let isValid = true; // Track form validity

    conditionsSelect.addEventListener('change', function() {
        if (this.value === 'minimum_purchase') {
            minimumPurchaseGroup.style.display = 'block';
            document.getElementById('minimumPurchaseAmount').required = true;
        } else {
            minimumPurchaseGroup.style.display = 'none';
            document.getElementById('minimumPurchaseAmount').required = false;
        }
    });

    form.addEventListener('submit', async function(e) {
        e.preventDefault();
        isValid = true; // Reset validation state

        // Get form values
        const couponCode = document.getElementById('code').value.trim();
        const minDiscountValue = parseFloat(document.getElementById('minDiscountValue').value);
        const maxDiscountValue = parseFloat(document.getElementById('maxDiscountValue').value);
        const expiryDate = document.getElementById('expiryDate').value;
        const usageLimit = parseInt(document.getElementById('usageLimit').value, 10);
        const description = document.getElementById('description').value.trim();
        const minimumPurchaseAmount = document.getElementById('minimumPurchaseAmount').value;

        // Coupon Code Validation
        if (!couponCode) {
            displayErrorMessage('code-error', 'Coupon code is required.');
            isValid = false;
        } else if (!/^[A-Za-z0-9\-]+$/.test(couponCode)) {
            displayErrorMessage('code-error', 'Coupon code can only contain letters, numbers, and hyphens.');
            isValid = false;
        } else if (couponCode.length < 5 || couponCode.length > 10) {
            displayErrorMessage('code-error', 'Coupon code must be between 5 and 10 characters.');
            isValid = false;
        }

        // Discount Value Validation
        if (isNaN(minDiscountValue) || minDiscountValue <= 0) {
            displayErrorMessage('minDiscount-error', 'Minimum discount value must be a valid positive number.');
            isValid = false;
        }
        if (isNaN(maxDiscountValue) || maxDiscountValue <= 0) {
            displayErrorMessage('maxDiscount-error', 'Maximum discount value must be a valid positive number.');
            isValid = false;
        }
        if (maxDiscountValue < minDiscountValue) {
            displayErrorMessage('maxDiscount-error', 'Maximum discount value cannot be less than minimum discount value.');
            isValid = false;
        }

        // Expiry Date Validation
        if (!expiryDate) {
            displayErrorMessage('date-error', 'Expiration date is required.');
            isValid = false;
        } else if (new Date(expiryDate) <= new Date()) {
            displayErrorMessage('date-error', 'Expiration date must be in the future.');
            isValid = false;
        }

        // Usage Limit Validation
        if (isNaN(usageLimit) || usageLimit < 1) {
            displayErrorMessage('limit-error', 'Usage limit must be a positive integer.');
            isValid = false;
        }

        // Description Validation
        if (description && !/^[^\s][A-Za-z0-9\s.,'()\-]+$/.test(description)) {
            displayErrorMessage('description-error', 'Description should not start with a space and can only contain letters, numbers, spaces, periods, commas, apostrophes, parentheses, and hyphens.');
            isValid = false;
        }

        // Minimum Purchase Amount Validation (If applicable)
        if (conditionsSelect.value === 'minimum_purchase' && !minimumPurchaseAmount) {
            displayErrorMessage('minimumPurchaseAmount-error', 'Minimum purchase amount is required.');
            isValid = false;
        } else if (minimumPurchaseAmount && isNaN(minimumPurchaseAmount)) {
            displayErrorMessage('minimumPurchaseAmount-error', 'Minimum purchase amount must be a valid number.');
            isValid = false;
        }

        // If validation fails, stop form submission
        if (!isValid) return;

        // Collect form data
        const formData = new FormData(form);
        const couponData = Object.fromEntries(formData.entries());
        // couponData.isActive = form.isActive.checked;

        // Remove minimumPurchaseAmount if not selected
        if (couponData.conditions !== 'minimum_purchase') {
            delete couponData.minimumPurchaseAmount;
        }

        try {
            const response = await fetch('/api/v1/admin/couponS/add', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ couponData })
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.message || 'An error occurred adding coupon!');
            }

            Swal.fire({
                icon: 'success',
                title: 'Success!',
                text: 'Coupon added successfully.',
                confirmButtonColor: '#48bb78',
            }).then(() => {
                window.location.reload();
            });

        } catch (error) {
            console.error('An error occurred while adding new coupon', error);
            Swal.fire({
                icon: 'error',
                title: 'Oops!',
                text: error.message,
                confirmButtonColor: '#e53e3e',
            });
        }
    });
});

function displayErrorMessage(elementId, message) {
    const errorElement = document.getElementById(elementId);
    errorElement.textContent = message;
    errorElement.style.display = 'block';
}

</script>
<%- include('../partials/admin/footer') %>