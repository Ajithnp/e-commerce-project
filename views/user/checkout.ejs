<%- include('../partials/user/header2') %>  
<style>
.copy-btn[disabled] {
    background-color: #e0e0e0;
    color: #9e9e9e;
    cursor: not-allowed;
    border: none;
}

.copy-btn[disabled]:hover::after {
    content: attr(title);
    position: absolute;
    background-color: #333;
    color: #fff;
    padding: 5px;
    border-radius: 3px;
    top: -30px;
    left: 50%;
    transform: translateX(-50%);
    white-space: nowrap;
    z-index: 1000;
}
</style>


<main class="main">
    <div class="page-header text-center" style="background-image: url('assets/images/page-header-bg.jpg')">
        <div class="container">
            <h1 class="page-title">Checkout<span>Shop</span></h1>
        </div><!-- End .container -->
    </div><!-- End .page-header -->
    <nav aria-label="breadcrumb" class="breadcrumb-nav">
        <div class="container">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="/">Home</a></li>
                <li class="breadcrumb-item"><a href="/user/store">Shop</a></li>
                <li class="breadcrumb-item"><a href="/beats/cart">Shopping cart</a></li>
                <li class="breadcrumb-item active" aria-current="page">Checkout</li>
            </ol>
        </div><!-- End .container -->
    </nav><!-- End .breadcrumb-nav -->

    <div class="page-content">
        <div class="cart">
            <div class="container">
                <div class="row">
                    <div class="col-lg-9">
                        <div class="col-lg-9">
                            <h2 class="summary-title">Delivery Address</h2>
                            <div class="delivery-addresses">
                                <% for (let i=0; i<userAddress.length; i++) {%>
                                <div class="address-container">
                                    <div class="address-header">
                                        <h3><%=userAddress[i].addressType%></h3>
                                        <button class="edit-btn" onclick="openModal('<%=userAddress[i]._id%>')">Edit</button>
                                        
                                    </div>
                                    <div class="address-content">
                                        <input type="radio" name="address" checked class="radio-input" value="<%= userAddress[i]._id %>" id="address-home">
                                        <label for="address-home" class="address-details">
                                            <div><%=userAddress[i].name%> <%=userAddress[i].lastName%> </div>
                                            <div><%=userAddress[i].companyName%></div>
                                            <div><%=userAddress[i].streetAddress%></div>
                                            <div><%=userAddress[i].landmark%></div>
                                            <div><%=userAddress[i].country%></div>
                                            <div><%=userAddress[i].state%></div>
                                            <div><%=userAddress[i].district%></div>
                                            <div><%=userAddress[i].city%></div>
                                            <div><%=userAddress[i].zip%></div>
                                            <div><%=userAddress[i].altPhone%></div>
                                            <div><%=userAddress[i].email%></div>
                                        </label>
                                    </div>
                                </div>
                                <% } %>
                                
                                
                            </div>
                            <button class="add-address-btn" onclick="openModal2()">Add New Address</button>
                        </div>
                        <!--  -->
                        <div class="checkout-page">
                            <button id="toggle-cart-details" class="btn btn-primary">Product Details</button>
                        
                            <div id="cart-details-dropdown" class="dropdown-container">
                                <table class="table table-cart table-mobile">
                                    <thead>
                                        <tr>
                                            <th>Product</th>
                                            <th>Color</th>
                                            <th>Price</th>
                                            <th>Quantity</th>
                                            <th>Total</th>
                                            <th></th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <%if(cart && cart.items.length > 0) {%>
                                            <%cart.items.slice().reverse().forEach(item => {%>
                                        <tr>
                                            <td class="product-col">
                                                <div class="product">
                                                    <figure class="product-media">
                                                        <a href="#">
                                                            <img src="/uploads/re-image/<%=item.productId.productImage[0]%>" alt="Product image">
                                                        </a>
                                                    </figure>
                                                    <h3 class="product-title">
                                                        <a href="#"><%= item.productId.productName %></a>
                                                    </h3>
                                                </div>
                                            </td>
                                            <td class="price-col"><%= item.selectedColor%></td>
                                           
                                            <td class="price-col">$<%= item.price.toFixed(2)%></td>
                                            <td class="quantity-col">
                                                <div class="cart-product-quantity">
                                                    <input type="string" class="form-control" value="<%=item.quantity%>"  data-decimals="0" disabled>
                                                </div>
                                            </td>
                                            <td class="total-col">$<%= item.totalPrice.toFixed(2)%></td>
                                          
                                        </tr>
                                        <% }) %>
                                        <% } %>

                                    </tbody>
                                </table>
                            </div>
                        </div>
                        <!----->

                      <!-- End .cart-bottom -->
                    </div><!-- End .col-lg-9 -->

                    
                    <input type="hidden" id="user-id" value="<%=user._id %>">
                    <aside class="col-lg-3">
                        <div>
                            <button id="showCouponsBtn">Show Available Coupons</button>
                        </div>
                        <div class="cart-discount">
                            <form id="couponForm">
                                <div class="input-group">
                                    <!-- Input field for coupon -->
                                    <input
                                        type="text"
                                        id="coupon-code"
                                        class="form-control"
                                        required
                                        placeholder="Enter coupon code"
                                    />
                        
                                    <!-- Apply button -->
                                    <div class="input-group-append">
                                        <button
                                            id="applyCoupon"
                                            class="btn btn-outline-primary-2"
                                            type="button"
                                        >
                                        <i class="icon-long-arrow-right"></i>
                                        </button>
                                    </div>
                        
                                    <!-- Remove button -->
                                    <div class="input-group-append">
                                        <button
                                            id="removeCoupon"
                                            class="btn btn-outline-primary-2"
                                            type="button"
                                            disabled
                                        >
                                        <i class="icon-long-arrow-left"></i>
                                        </button>
                                    </div>
                                </div>
                            </form>
                            
                        </div>
                        
                        <div class="summary">
                            
                            <h3 class="summary-title">Your Order</h3><!-- End .summary-title -->

                            <table class="table table-summary">
                                <thead>
                                    <tr>
                                        <th>Product</th>
                                        <th>Total</th>
                                    </tr>
                                </thead>

                                <tbody>
                                    <%if(cart && cart.items.length > 0) {%>
                                        <%cart.items.slice().reverse().forEach(item => {%>

                                    <tr>
                                        <td><a href="#"><%= item.productId.productName%></a></td>
                                        <td><%= item.totalPrice%></td>
                                    </tr>
                                    <% }) %>

                                   
                                    <tr class="summary-subtotal">
                                        <td>Subtotal:</td>
                                        <td id="subTotalAmount">₹<%= cart.subTotal %></td>
                                    </tr><!-- End .summary-subtotal -->
                                    <tr>
                                        <td>Savings:</td>
                                        <td style="color: green;">₹<%= totalSavings %></td>
                                    </tr>
                                    <input type="hidden" id="sub-value" value="<%= cart.subTotal %>">

                                    <tr>
                                        <td>Coupon discount:</td>
                                        <td id="couponDiscountAmount" style="color: red;">0.00</td>
                                    </tr>
                                    <tr>
                                        <td>Shipping:</td>
                                        <td>Free shipping</td>
                                    </tr>
                                    <tr class="summary-total">
                                        <td>Total:</td>
                                        <td id="grandTotalAmount">₹<%= cart.subTotal %> </td>
                                    </tr><!-- End .summary-total -->
                                    
                                    <% } %>
                                </tbody>
                            </table><!-- End .table table-summary -->



                            <div class="accordion-summary" id="accordion-payment">
                                ------------------------------------
                                <div class="payment-options">
                                    <h6>Select a Payment Method</h6>
                                    <form id="payment-form">
                                        <!-- Payment Options with Radio Buttons -->
                                      
                                        <div class="payment-option">
                                            <input class="collapsed" data-toggle="collapse" data-target="#collapse-wallet" aria-expanded="false" aria-controls="collapse-wallet"  type="radio" id="wallet" name="paymentMethod" value="Wallet">
                                            <label for="wallet">Wallet</label>
                                            <div id="collapse-wallet" class="collapse" aria-labelledby="heading-wallet" data-parent="#accordion-payment">
                                                <div class="card-body">
                                                    Your wallet balance: ₹ <span style="color: green;"><%= walletAmount %></span>
                                                </div>
                                        </div>
                                            
                                        </div>
                                        <div class="payment-option">
                                            <!-- <input type="radio" id="cod" name="paymentMethod" value="COD"> -->
                                            <input class="collapsed" data-toggle="collapse" data-target="#collapse-cod" aria-expanded="false" aria-controls="collapse-cod" type="radio" id="cod" name="paymentMethod" value="COD">
                                            <label for="cod">Cash on Delivery</label>
                                            <div id="collapse-cod" class="collapse" aria-labelledby="heading-cod" data-parent="#accordion-payment">
                                                <div class="card-body">
                                                    Cash on Delivery is only available for order amount above 1000.
                                                </div>
                                        </div>
                                        <div class="payment-option">
                                            <input type="radio" id="Razor-Pay" name="paymentMethod" value="razorpay">
                                            <label for="paypal">Razor Pay</label>
                                        </div>
                                        
                                    </form>
   
                            </div><!-- End .accordion -->
                            


                            <button type="submit" class="btn btn-outline-primary-2 btn-order btn-block" id="order-place">
                                <span class="btn-text">Place Order</span>
                                <span class="btn-hover-text">Proceed to Checkout</span>
                            </button>
                        </div><!-- End .summary -->
                    </aside><!-- End .col-lg-3 -->
                </div><!-- End .row -->
            </div><!-- End .container -->
        </div><!-- End .cart -->
       
        
    </div><!-- End .page-content -->
    
</main><!-- End .main -->

<!--modal for showing the coupon-->


<div id="couponModal" class="modal">
    <div class="modal-content fade-in">
        <span class="close">&times;</span>
        <h2>Available Coupons</h2>
        <table class="coupon-table">
            <thead>
                <tr>
                    <th>Coupon Code</th>
                    <th>Description</th>
                    <th>Discount Value</th>
                    <th>Expiry Date</th>
                    <th>Conditions</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody id="couponTableBody">
                <% if (coupons && coupons.length > 0) { %>
                    <% coupons.forEach(coupon => { %>
                        <tr>
                            <td><%= coupon.code %></td>
                            <td><%= coupon.description %></td>
                            <% if (coupon.discountType === 'percentage') { %>
                                <td><%= coupon.minDiscountValue %>%</td>
                            <% } else { %>
                                <td><%= coupon.minDiscountValue %></td>
                            <% } %>
                            <td class="getExpiryClass"><%= new Date(coupon.expiryDate).toLocaleDateString() %></td>
                            <td><%= coupon.conditions || 'No conditions' %></td>
                            <td>
                                <button class="copy-btn" data-coupon="<%=coupon.code%>">
                                    <i class="fas fa-copy"></i> Copy
                                </button>
                            </td>
                        </tr>
                    <% }) %>
                <% } else { %>
                    <tr>
                        <td colspan="6">No coupons available at the moment.</td>
                    </tr>
                <% } %>
                
            </tbody>
            
        </table>
    </div>
</div>
</div>



<!-- 
<button id="address-form-open-modal">Open Address Form</button> -->

    <div id="address-form-modal" class="address-form-modal">
        <div class="address-form-modal-content">
            <span class="address-form-close" id="close-modal" onclick="closeModal()">&times;</span>
            <h2>Edit Address</h2>
            <form id="userAddress-edit" class="address-form">
                <div class="address-form-row">
                    <div>
                        <label for="address-form-name">Name:</label>
                        <input type="text" id="name-e" name="name" required>
                    </div>
                    <div>
                        <label for="address-form-lastName">Last Name:</label>
                        <input type="text" id="last-name-e" name="lastName">
                    </div>
                </div>

                <div class="address-form-row">
                    <div>
                        <label for="address-form-email">Email:</label>
                        <input type="email" id="email-e" name="email" required>
                    </div>
                    <div>
                        <label for="address-form-companyName">Company Name:</label>
                        <input type="text" id="companyName-e" name="companyName">
                    </div>
                </div>

                <div class="address-form-row">
                    <div>
                        <label for="address-form-phone">Phone:</label>
                        <input type="tel" id="altPhone-e" name="phone" required>
                    </div>
                  
                </div>

                <div class="address-form-row">
                    <div>
                        <label for="address-form-streetAddress">Street Address:</label>
                        <input type="text" id="streetAddress-e" name="streetAddress" required>
                    </div>
                    <div>
                        <label for="address-form-landmark">Landmark:</label>
                        <input type="text" id="landmark-e" name="landmark">
                    </div>
                </div>

                <div class="address-form-row">
                    <div>
                        <label for="address-form-city">City:</label>
                        <input type="text" id="city-e" name="city" required>
                    </div>
                    <div>
                        <label for="address-form-district">District:</label>
                        <input type="text" id="dist-e" name="district">
                    </div>
                </div>

                <div class="address-form-row">
                    <div>
                        <label for="address-form-state">State:</label>
                        <input type="text" id="state-e" name="state" required>
                    </div>
                    <div>
                        <label for="address-form-country">Country:</label>
                        <input type="text" id="country-e" name="country" required>
                    </div>
                </div>

                <div class="address-form-row">
                    <div>
                        <label for="address-form-zip">ZIP Code:</label>
                        <input type="text" id="zip-e" name="zip" required>
                    </div>
                    <div>
                        <label for="address-form-addressType">Address Type:</label>
                        <div class="check-group">
                            <label ><input type="radio"   name="addressType" value="Home"> Home</label>
                            <label ><input type="radio"  name="addressType" value="Office"> Office</label>
                            <label><input type="radio"   name="addressType" value="Other">Other </label>
                        </div>
                        <!-- <select id="address-form-addressType" name="addressType">
                            <option value="Home">Home</option>
                            <option value="Office">Office</option>
                            <option value="Other">Other</option>
                        </select> -->
                    </div>
                    <input type="hidden" id="hiddenId" name="id" value="">
                </div>

                <button type="submit" class="address-form-submit">Submit</button>
            </form>
        </div>
    </div>


    <!-- Add new address-->

    <div id="add-address-form-modal" class="address-form-modal">
        <div class="address-form-modal-content">
            <span class="address-form-close" id="close-modal" onclick="closeModal()">&times;</span>
            <h2> Add New Address</h2>
            <form id="userAddress-add" class="address-form">
                <div class="address-form-row">
                    <div>
                        <label for="address-form-name">Name:</label>
                        <input type="text" id="name1" name="name1" required>
                        <p id="name-err" class="error-message"></p>
                    </div>
                    <div>
                        <label for="address-form-lastName">Last Name:</label>
                        <input type="text" id="last-name" name="lastName">
                        <p id="lastName-err" class="error-message"></p>
                    </div>
                </div>

                <div class="address-form-row">
                    <div>
                        <label for="address-form-email">Email:</label>
                        <input type="email" id="email1" name="email" required>
                        <p id="email-err" class="error-message"></p>
                    </div>
                    <div>
                        <label for="address-form-companyName">Company Name:</label>
                        <input type="text" id="companyName" name="companyName">
                        <p id="company-err" class="error-message"></p>
                    </div>
                </div>

                <div class="address-form-row">
                    <div>
                        <label for="address-form-phone">Phone:</label>
                        <input type="tel" id="altPhone" name="phone" required>
                        <p id="phone-err" class="error-message"></p>
                    </div>
                  
                </div>

                <div class="address-form-row">
                    <div>
                        <label for="address-form-streetAddress">Street Address:</label>
                        <input type="text" id="streetAddress" name="streetAddress" required>
                        <p id="street-err" class="error-message"></p>
                    </div>
                    <div>
                        <label for="address-form-landmark">Landmark:</label>
                        <input type="text" id="landmark" name="landmark">
                        <p id="landmark" class="error-message"></p>
                    </div>
                </div>

                <div class="address-form-row">
                    <div>
                        <label for="address-form-city">City:</label>
                        <input type="text" id="city" name="city" required>
                        <p id="city-err" class="error-message"></p>
                    </div>
                    <div>
                        <label for="address-form-district">District:</label>
                        <input type="text" id="dist" name="dist">
                        <p id="dist-err" class="error-message"></p>
                    </div>
                </div>

                <div class="address-form-row">
                    <div>
                        <label for="address-form-state">State:</label>
                        <input type="text" id="state" name="state" required>
                        <p id="state-err" class="error-message"></p>
                    </div>
                    <div>
                        <label for="address-form-country">Country:</label>
                        <input type="text" id="country" name="country" required>
                        <p id="country-err" class="error-message"></p>
                    </div>
                </div>

                <div class="address-form-row">
                    <div>
                        <label for="address-form-zip">ZIP Code:</label>
                        <input type="text" id="zip" name="zip" required>
                        <p id="zip-err" class="error-message"></p>
                    </div>
                    <div>
                        <label for="address-form-addressType">Address Type:</label>
                        <div class="check-group">
                            <label ><input type="radio"   name="addressType" value="Home"> Home</label>
                            <label ><input type="radio"  name="addressType" value="Office"> Office</label>
                            <label><input type="radio"   name="addressType" value="Other">Other </label>
                        </div>
                        <!-- <select id="address-form-addressType" name="addressType">
                            <option value="Home">Home</option>
                            <option value="Office">Office</option>
                            <option value="Other">Other</option>
                        </select> -->
                    </div>
                    <input type="hidden" id="hiddenId" name="id" value="">
                </div>

                <button type="submit" class="address-form-submit">Submit</button>
            </form>
        </div>
    </div>

    <input type="hidden" id="couponId">
    <input type="hidden" id="discouValue">

   
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

    <script>
   const userId = '<%= user._id %>';

    async function openModal(addressId) {
    document.getElementById("address-form-modal").style.display = "block";

    try {
        console.log('address, data', addressId)
        const response = await fetch(`/beats/user/getAddress/${addressId}`,{method:'GET'});

        if(!response.ok){
        throw new Error('Failed to fetch address data..!')
         }

    const addressData = await response.json();
    console.log('address data', addressData);
    
    document.getElementById('name-e').value = addressData.name;
    document.getElementById('last-name-e').value = addressData.lastName;
    document.getElementById('companyName-e').value =addressData.companyName;
    document.getElementById('streetAddress-e').value =addressData.streetAddress;
    document.getElementById('landmark-e').value =addressData.landmark;
    document.getElementById('country-e').value =addressData.country;
    document.getElementById('state-e').value =addressData.state;
    document.getElementById('dist-e').value =addressData.district;
    document.getElementById('city-e').value =addressData.city;
    document.getElementById('zip-e').value =addressData.zip;
    document.getElementById('altPhone-e').value =addressData.altPhone;
    document.getElementById('email-e').value =addressData.email;
    document.getElementById('hiddenId').value = addressData._id;

    const addressTypeRadios = document.querySelectorAll('input[name="addressType"]');
        addressTypeRadios.forEach(radio => {
            if (radio.value === addressData.addressType) {
                radio.checked = true; 
            }
        });


    } catch (error) {
        console.error('Error fetching address', error)
    alert(error.message)
        
    }

    }

    //Edit address

    document.getElementById('userAddress-edit').addEventListener('submit', async function (e) {
        e.preventDefault();

        const id = document.getElementById('hiddenId').value;;
        console.log('helooooo', id)

   const name =  document.getElementById('name-e').value.trim();
   const lastName = document.getElementById('last-name-e').value.trim();
   const companyName = document.getElementById('companyName-e').value.trim();
   const streetAddress =  document.getElementById('streetAddress-e').value.trim();
   const landmark = document.getElementById('landmark-e').value.trim();
   const country = document.getElementById('country-e').value.trim();
   const state = document.getElementById('state-e').value.trim();
   const dist =  document.getElementById('dist-e').value.trim();
   const city =  document.getElementById('city-e').value.trim();
   const zip = document.getElementById('zip-e').value.trim();
   const altPhone = document.getElementById('altPhone-e').value.trim();
   const email = document.getElementById('email-e').value.trim();

   const addressType = document.querySelector('input[name="addressType"]:checked')?.value;

   if (!addressType) {
        return Swal.fire({
            title: 'Error!',
            text: 'Please select an address type.',
            icon: 'error'
        });
    }





   const data = {
    name,
    lastName,
    companyName,
    streetAddress,
    landmark,
    country,
    state,
    dist,
    city,
    zip,
    altPhone,
    email,
    addressType
   }


   Swal.fire({
    title: 'Do you want to make changes?',
    icon:'warning',
    showCancelButton: true,
    confirmButtonText: 'Yes, update!',
    cancelButtonText: 'No, cancel'
   }).then(async (result)=>{
    if(result.isConfirmed){

        try{
            const response = await fetch(`/beats/user/editAddress/${id}`,{
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })
            if(!response.ok){
                const errorData = await response.json();
                throw new Error(errorData.message || 'An unexpected error occured..!')
            }
            const successData = await response.json();
            Swal.fire({
                title: successData.message,
                icon: 'success',
    
            }).then(()=>{
                location.reload();
            });
        }catch(error){
            console.error('An error occured edit address',error)
            Swal.fire({
                title: 'Error!',
                text:error.message,
                icon:'error'
            });
        }
    }
   });


    

});


async function openModal2(){
document.getElementById("add-address-form-modal").style.display = "block";


function getInputValues() {
    return {
      name: document.getElementById('name1').value.trim(),
      lastName: document.getElementById('last-name').value.trim(),
      companyName: document.getElementById('companyName').value.trim(),
      streetAddress: document.getElementById('streetAddress').value.trim(),
      landmark: document.getElementById('landmark').value.trim(),
      country: document.getElementById('country').value.trim(),
      state: document.getElementById('state').value.trim(),
      dist: document.getElementById('dist').value.trim(),
      city: document.getElementById('city').value.trim(),
      zip: document.getElementById('zip').value.trim(),
      altPhone: document.getElementById('altPhone').value.trim(),
      email: document.getElementById('email1').value.trim(),
    };
  }

     // Address Validation Function
     function validateUserAddress() {
    const values = getInputValues();
    let isValid = true;
    const errors = {};

    // Name validation
    if (!values.name) {
      isValid = false;
      errors.name = 'First name is required.';
    } else if (values.name.length < 3 || !/^[a-zA-Z\s]+$/.test(values.name)) {
      isValid = false;
      errors.name = 'First name must be at least 3 characters and contain only alphabets.';
    }

    // Last name validation
    if (values.lastName) {
      if (values.lastName.length < 2) {
        isValid = false;
        errors.lastName = 'Last name must be at least 2 characters.';
      } else if (!/^[A-Za-z][A-Za-z0-9\s]*$/.test(values.lastName)) {
        isValid = false;
        errors.lastName = 'Last name must start with an alphabet and contain only letters, numbers, or spaces.';
      }
    }

    // Zip code validation
    if (values.zip && !/^\d{5,6}$/.test(values.zip)) {
      isValid = false;
      errors.zip = 'Zip code must be 5-6 digits.';
    }

    // Alternate phone validation
    if (values.altPhone && !/^\d{10}$/.test(values.altPhone)) {
      isValid = false;
      errors.phone = 'Alternate phone must be a valid 10-digit number.';
    }

    // Email validation
    if (values.email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(values.email)) {
      isValid = false;
      errors.email = 'Please enter a valid email address.';
    }

    // Optional field validations
    if (values.companyName && !/^[a-zA-Z0-9\s]+$/.test(values.companyName)) {
      isValid = false;
      errors.company = 'Company name can only contain letters, numbers, and spaces.';
    }

    // Required fields (country, state, district, city, street)
    if (!values.country) {
      isValid = false;
      errors.country = 'Country is required.';
    } else if (!/^[A-Za-z]+$/.test(values.country)) {
      isValid = false;
      errors.country = 'Only alphabetic characters are allowed!';
    }

    if (!values.state) {
      isValid = false;
      errors.state = 'State is required.';
    } else if (!/^[A-Za-z]+$/.test(values.state)) {
      isValid = false;
      errors.state = 'Only alphabetic characters are allowed!';
    }

    if (!values.dist) {
      isValid = false;
      errors.dist = 'District is required.';
    } else if (!/^[A-Za-z]+$/.test(values.dist)) {
      isValid = false;
      errors.dist = 'Only alphabetic characters are allowed!';
    }

    if (!values.city) {
      isValid = false;
      errors.city = 'City is required.';
    } else if (!/^[A-Za-z]+$/.test(values.city)) {
      isValid = false;
      errors.city = 'Only alphabetic characters are allowed!';
    }

    if (!values.streetAddress) {
      isValid = false;
      errors.streetAddress = 'Street address is required.';
    }

    // Display errors
    for (const [key, message] of Object.entries(errors)) {
      const errorElement = document.getElementById(`${key}-err`);
      if (errorElement) {
        errorElement.textContent = message;
      }
    }

    return isValid;
  }







// address add form,
document.getElementById('userAddress-add').addEventListener('submit',async function (e){
    e.preventDefault();
    if (!validateUserAddress()) {
      return;
    }


    // Capture selected address type
    const addressType = document.querySelector('input[name="addressType"]:checked')?.value;

// Validate that an address type is selected
if (!addressType) {
return Swal.fire({
    title: 'Error!',
    text: 'Please select an address type.',
    icon: 'error'
});
}
   

const values = getInputValues();
    const data = {
      ...values,
      addressType,
    };



console.log('captured data,',data);


try{
const response = await fetch('/beats/user/addAddress',{
method: 'POST',
headers:{
    'Content-Type':'application/json'
},
body:JSON.stringify(data)
})
if(!response.ok){
const errorData = await response.json();
throw new Error(errorData.message || 'An unexpected error occured..!')
}
const successData = await response.json();
Swal.fire({
title:successData.message,
icon:'success',
}).then(()=>{
location.reload();
});
}catch(error){
console.error('An error occured',error)
Swal.fire({
title: 'Error!',
text:error.message,
icon:'error'
});
}
});
};







    function closeModal() {
        document.getElementById("address-form-modal").style.display = "none";
        document.getElementById('add-address-form-modal').style.display = "none";
        
   
   }

        const addressFormModal = document.getElementById("address-form-modal");
        const addressFormModal2 = document.getElementById("add-address-form-modal");
       
      

        window.onclick = function(event) {
            if (event.target == addressFormModal) {
                addressFormModal.style.display = "none";
            }
            if (event.target == addressFormModal2) {
                addressFormModal2.style.display = "none";
            }
            
        }

      

        // product details modall
const toggleButton = document.getElementById('toggle-cart-details');
const cartDetailsDropdown = document.getElementById('cart-details-dropdown');


toggleButton.addEventListener('click', () => {
    cartDetailsDropdown.classList.toggle('visible'); // Toggle the 'visible' class
});

// ------------------------------------------------------------------------------------//
                  //--- Place Order submission-----//
    document.getElementById('order-place').addEventListener('click', async function (e) {
    e.preventDefault();

    // fetching wallet amount:
    let walletBalance = parseInt('<%= walletAmount %>');

    const grandTotalElement = document.getElementById("grandTotalAmount");

    const grandTotalText = grandTotalElement.innerText.trim();
    const grandTotalValue = parseFloat(grandTotalText.replace(/₹/, ''));
    

    const couponData = JSON.parse(sessionStorage.getItem('appliedCoupon'));
    let couponId = null;
    let couponDiscount = null;
    let couponCode = null;
  if(couponData){
     couponId = couponData.couponId;
     couponCode = couponData.couponCode;
     couponDiscount = couponData.couponDiscountAmount;

  }
    

  const subTotal = parseFloat('<%= cart.subTotal %>');
  const savings = parseFloat('<%= totalSavings %>');



    const selectedAddress = document.querySelector('input[name="address"]:checked');
    const selectedPaymentMethod = document.querySelector('input[name="paymentMethod"]:checked');

    if (!selectedAddress) {
        Swal.fire({
            icon: 'info',
            title: 'Please select an address',
            showConfirmationButton: true
        });
        return;
    }

    if (!selectedPaymentMethod) {
        Swal.fire({
            icon: 'info',
            title: 'Please select a payment method',
            showConfirmationButton: true
        });
        return;
    }

    let address = selectedAddress.value;
    let paymentMethod = selectedPaymentMethod.value;
    const cartItems = <%- cartItems %>; 

    const orderItems = cartItems.map(item => ({
        product: item.productId,
        quantity: item.quantity,
        color: item.selectedColor,
        price: item.price,
        totalPrice: item.totalPrice
    }));

    const orderDetails = {
        userId, // Ensure userId is defined earlier
        orderItems,
        address,
        paymentMethod,
        subTotal,
        savings,
        grandTotalValue,
        couponDiscount,
        couponId,
        couponCode
    };

    Swal.fire({
        title: "Confirm Your Order",
        text: "Are you sure you want to place this order?",
        icon: "question",
        showCancelButton: true,
        confirmButtonColor: "#48bb78",
        cancelButtonColor: "#e53e3e",
        confirmButtonText: "Yes, Place Order",
        cancelButtonText: "Cancel",
        showClass: {
            popup: `animate__animated animate__fadeInUp animate__faster`
        },
        hideClass: {
            popup: `animate__animated animate__fadeOutDown animate__faster`
        }
    }).then(async (result) => {
        if (result.isConfirmed) {
            if (paymentMethod === 'razorpay') {
                try {
                    
                    const response = await fetch('http://localhost:3001/order', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ amount: grandTotalValue, currency: 'INR' })
                    });


                    const data = await response.json();

                    if (data.order_id) {
                        const razorpayOptions = {
                            key: data.key_id,
                            amount: data.amount,
                            currency: data.currency,
                            name: "Beats Studio",
                            description: "",
                            order_id: data.order_id,
                            handler: function (response) {
                                fetch('/paymentCapture', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json'
                                    },
                                    body: JSON.stringify({
                                        razorpayPaymentId: response.razorpay_payment_id,
                                        razorpayOrderId: response.razorpay_order_id,
                                        razorpaySignature: response.razorpay_signature,
                                        address: address,
                                        userId, 
                                        paymentMethod,
                                        subTotal,
                                        grandTotalValue,
                                        orderItems,
                                        savings,
                                        couponDiscount,
                                        couponId,
                                        couponCode


                                    })
                                })
                                    .then(response => response.json())
                                    .then(paymentData => {
                                        
                                        if (paymentData.status === 'ok') {
                                            window.location.href = '/beats/orderSuccess';
                                        } else {
                                            Swal.fire({
                                                icon: 'error',
                                                title: 'Order Failed',
                                                text: paymentData.error
                                            });
                                        }
                                    })
                                    .catch(error => {
                                        console.error('Payment verification failed:', error);
                                        Swal.fire({
                                            icon: 'error',
                                            title: 'Order Error',
                                            text: 'There was an error completing the payment. Please try again.'
                                        });
                                    });
                            },
                            theme: {
                                color: "#3399cc"
                            }
                        };
                        const rzp = new Razorpay(razorpayOptions);
                        rzp.open();

                        //for failing
                        rzp.on('payment.failed',function (response){
                            console.error('Payment faild..!', response.error)
                            Swal.fire({
                                icon: 'error',
                                 title: 'Payment Failed',
                                text: `Reason: ${response.error.description}`,
                                 footer: 'Please try again or choose a different payment method.'
                            })

                            const paymentId = response.error?.metadata?.payment_id || "Missing Payment ID";
                            const orderId = response.error?.metadata?.order_id || "Missing Order ID";
                            const signature = response.error?.metadata?.signature || "Missing razor pay signature";

                            // save Failed order details..!
                             fetch('/save/failedOrder',{
                                method: 'POST',
                                headers:{
                                    'Content-Type':'application/json'
                                },
                                body:JSON.stringify({
                                       razorpayPaymentId: paymentId,
                                        razorpayOrderId: orderId,
                                        razorpaySignature: response.razorpay_signature || "Missing ",
                                        address: address,
                                        userId, 
                                        paymentMethod,
                                        subTotal,
                                        grandTotalValue,
                                        orderItems,
                                        savings,
                                        couponDiscount,
                                        couponId,
                                        couponCode
                                })
                             })
                             .then(res => res.json())
                                .then(saveResponse => {
                                 
                                    if (saveResponse.status === 'ok') {
                                        Swal.fire({
                                            icon: 'info',
                                            title: 'Payment Failed',
                                            text: 'Order saved with failed payment status. Please try again.',
                                             confirmButtonText: 'OK'
                                        
                                        }).then((result)=>{
                                            if(result.isConfirmed){
                                                 window.location.replace('/beats/user/orders')
                                            }
                                        })
                                       
                                    } else {
                                        Swal.fire({
                                            icon: 'error',
                                            title: 'Order Save Failed',
                                            text: saveResponse.error
                                        });
                                    }
                                })
                                .catch(error => {
                                    console.error('Error saving failed order:', error);
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Error',
                                        text: 'Could not save order details. Please contact support.'
                                    });
                                });
                        
                        })

                        //for failing
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Order Creation Failed',
                            text: data.error
                        });
                    }
                } catch (error) {
                    console.error('Error creating Razorpay order:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Order Error',
                        text: 'There was an error placing your order. Please try again.'
                    });
                }
            }else if(paymentMethod === 'Wallet'){

                if(grandTotalValue > walletBalance){
                    Toastify({
                        text: "Insufficient wallet balance!",
                        backgroundColor: "#f44336", 
                        duration: 3000,
                   }).showToast();
                  return;

                }

                fetch("/beats/user/checkout", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify(orderDetails)
                })

                .then((response) => {
                    if(response.ok){
                        return response.json();
                    }else {
                        throw new Error ('Failed to place the order');
                    }
                })
                .then((data)=>{
                    sessionStorage.removeItem('appliedCoupon');
                        sessionStorage.removeItem('appliedCouponCode');
                        window.location.href = `/beats/orderSuccess`;
                })
                .catch((error)=>{
                    console.error(error);
                        Swal.fire(
                            "Error",
                            "There was an issue placing your order. Please try again later.",
                            "error"
                        );
                })
            
        } else  {
                
                if (grandTotalValue >= 1000) {
   
                Toastify({
                         text: "Your order is eligible for Cash on Delivery!",
                        backgroundColor: "#4caf50",
                       duration: 3000,
                  }).showToast();
              } else {
   
                Toastify({
                    text: "Cash on Delivery is only available for orders above 1000.",
                     backgroundColor: "#f44336",
                     duration: 3000,
                 }).showToast();
               return; 
            }

            


                fetch("/beats/user/checkout", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify(orderDetails)
                })
                    .then((response) => {
                        if (response.ok) {
                            return response.json();
                        } else {
                            throw new Error("Failed to place the order");
                        }
                    })
                    .then((data) => {
                        const orderId = data.orderId;
                        console.log('orderId', orderId);
                        

                        sessionStorage.removeItem('appliedCoupon');
                        sessionStorage.removeItem('appliedCouponCode');
                        window.location.href = `/beats/orderSuccess?orderId=${orderId}`;
                        
                    })
                    .catch((error) => {
                        console.error(error);
                        Swal.fire(
                            "Error",
                            "There was an issue placing your order. Please try again later.",
                            "error"
                        );
                    });
            }
        } else if (result.dismiss === Swal.DismissReason.cancel) {
            Swal.fire("Cancelled", "Your order was not placed.", "error");
        }
    });
});

// modal -- coupon show

const modal = document.getElementById("couponModal");
        const btn = document.getElementById("showCouponsBtn");
        const span = document.getElementsByClassName("close")[0];

        btn.onclick = function() {
            modal.style.display = "block";
        }

        span.onclick = function() {
            modal.style.display = "none";
        }

        window.onclick = function(event) {
            if (event.target == modal) {
                modal.style.display = "none";
            }
        }

        function addCopyButtonListeners() {
            const copyButtons = document.querySelectorAll('.copy-btn');
            copyButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const couponCode = this.getAttribute('data-coupon');
                    navigator.clipboard.writeText(couponCode).then(() => {
                        this.classList.add('copied');
                        this.innerHTML = '<i class="fas fa-check"></i> Copied!';
                        setTimeout(() => {
                            this.classList.remove('copied');
                            this.innerHTML = '<i class="fas fa-copy"></i> Copy';
                        }, 2000);
                    });
                });
            });
        }

        function getExpiryClass(expiryDate) {
            const today = new Date();
            const expiry = new Date(expiryDate);
            const timeDiff = expiry.getTime() - today.getTime();
            const daysDiff = Math.ceil(timeDiff / (1000 * 3600 * 24));

            if (daysDiff < 0) {
                return 'expired';
            } else if (daysDiff <= 7) {
                return 'expiry-soon';
            }
            return '';
        }

        // Call addCopyButtonListeners when the page loads
        document.addEventListener('DOMContentLoaded', addCopyButtonListeners);
    </script>

<%- include('../partials/user/footer') %>


