
<%- include('../partials/user/header2') %> 
<style>

.return-status {
    font-weight: bold;
    padding: 5px 10px;
    border-radius: 5px;
    display: inline-block;
}

.return-status.status-no-return-requested {
    color: gray;
}

.return-status.status-return-request {
    color: orange;
}

.return-status.status-approved {
    color: green;
}

.return-status.status-rejected {
    color: red;
}


    #price-id{
        margin-right: 1rem;
    }
    .view-order-content {
        max-width: 800px;
        margin: 0 auto;
        /* padding: 20px; */
        font-family: Arial, sans-serif;
    }
    .order-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }
    .order-status {
        padding: 8px 16px;
        border-radius: 4px;
        font-weight: bold;
    }
    .status-Processing {
        background-color: #fef3c7;
        color: #92400e;
        border-radius: 4px;
        padding: 5px;
       
    }
    .status-Failed {
        background-color: #f61616;
        color: #ffffff;
        border-radius: 4px;
        padding: 5px;
       
    }
    .status-Cancelled {
        background-color: #e03939;
        color: #f2edea;
        border-radius: 4px;
        padding: 5px;
    }
    .status-Delivered {
        background-color: #79e64f;
        color: #fefefe;
        border-radius: 4px;
        padding: 5px;
    }
    .status-Shipped {
        background-color: #63d4ed;
        color: #2a2727;
        border-radius: 4px;
        padding: 5px;
    }
    .order-details {
        background-color: #f9fafb;
        border-radius: 8px;
        padding: 20px;
        margin-bottom: 20px;
    }
    .order-details h2 {
        margin-top: 0;
        margin-bottom: 15px;
    }
    .detail-row {
        display: flex;
        justify-content: space-between;
        margin-bottom: 10px;
    }
    .order-items {
        margin-bottom: 20px;
    }
    .order-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-bottom: 1px solid #e5e7eb;
        padding: 15px 0;
    }
    .item-image {
        width: 80px;
        height: 80px;
        object-fit: cover;
        margin-right: 15px;
    }
    .item-details {
        flex-grow: 1;
    }
    .item-quantity {
        /* font-weight: bold; */
        margin-left: 15px;
    }
    .order-summary {
        background-color: #f9fafb;
        border-radius: 8px;
        padding: 20px;
    }
    .summary-row {
        display: flex;
        justify-content: space-between;
        margin-bottom: 10px;
    }
    .summary-total {
        font-weight: bold;
        font-size: 1.2em;
        border-top: 2px solid #e5e7eb;
        padding-top: 10px;
    }
    .btn {
        display: inline-block;
        padding: 10px 20px;
        background-color: #f97316;
        color: white;
        text-decoration: none;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 16px;
        transition: background-color 0.3s;
    }
    .btn:hover {
        background-color: #ea580c;
    }
    .btn-info{
        background-color: #63d4ed;
    }
    .btn-cancel {
        background-color: #ef4444;
    }
    .btn-cancel:hover {
        background-color: #dc2626;
    }
    .btn-back {
        background-color: #6b7280;
        margin-bottom: 20px;
    }
    .btn-back:hover {
        background-color: #4b5563;
    }
    @media (max-width: 768px) {
        .order-item {
            flex-direction: column;
            align-items: flex-start;
        }
        .item-image {
            margin-bottom: 10px;
        }
        .item-quantity {
            margin-left: 0;
            margin-top: 10px;
        }
    }
</style>

<main class="main">
    <div class="page-header text-center" style="background-image: url('assets/images/page-header-bg.jpg')">
        <div class="container">
            <h1 class="page-title">Order Details</h1>
        </div><!-- End .container -->
    </div><!-- End .page-header -->
    <nav aria-label="breadcrumb" class="breadcrumb-nav mb-3">
        <div class="container">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="/">Home</a></li>
                <li class="breadcrumb-item"><a href="/user/store">Shop</a></li>
                <li class="breadcrumb-item active" aria-current="page">My Account</li>
            </ol>
        </div><!-- End .container -->
    </nav><!-- End .breadcrumb-nav -->

    

                    <div class="view-order-content">
                        <button id="backButton" class="btn btn-back" onclick="window.history.back()">← Back to Orders</button>
                        <div class="order-header">
                            <h4>Order Id <%= order.orderId%></h4>
                               <span class="status status-<%= order.orderStatus %>"><strong><%= order.orderStatus %></strong></span>
                            <!-- <span class="order-status status-processing">Processing</span> -->
                        </div>
                    
                        <div class="order-details">
                            <h4>Order Details</h4>
                            <div class="detail-row">
                                <span>Order Date:</span>
                                <span>Date:<%= order.createdAt.getFullYear() + '-' + String(order.createdAt.getMonth() + 1).padStart(2, '0') + '-' + String(order.createdAt.getDate()).padStart(2, '0') %></span>
                            </div>
                            <div class="detail-row">
                                <span>Shipping Address:</span>
                                <span><%= order.shippingAddress1 %></span>
                            </div>
                            <div class="detail-row">
                                <span>Payment Method:</span>
                                <span><%= order.paymentMethod %></span>
                            </div>
                        </div>
                    
                        <div class="order-items">
                            <h4>Order Items</h4>
                            <% order.orderItems.forEach(item => { %>
                                <div class="order-item">
                                    <!-- Product Image -->
                                    <img src="/uploads/re-image/<%= item.product.productImage[0] %>" alt="<%= item.product.productName %>" class="item-image">
                                    
                                    <!-- Product Details -->
                                    <div class="item-details">
                                        <h6><%= item.product.productName %></h6>
                                        <p>Color: <%= item.color %></p>
                                        <span class="item-quantity">Qty: <%= item.quantity %></span>
                                    </div>
                        
                                    <!-- Price -->
                                    <span class="item-price" style="font-weight: bold;">₹ <%= item.totalPrice.toFixed(2) %></span>
                                    
                                    <!-- Return Status and Button -->
                                    <% if (item.returnStatus === 'No Return Requested') { %>
                                        <% if (order.orderStatus === 'Delivered') { %>
                                            <button class="btn btn-warning ml-5px" onclick="returnProduct('<%= item.product._id %>', '<%= order._id %>','<%= item.color%>','<%= item.quantity%>')">
                                                Request Return
                                            </button>
                                        <% } %>
                                    <% } else { %>
                                        <span class="return-status status-<%= item.returnStatus.toLowerCase().replace(' ', '-') %>">
                                            <%= item.returnStatus %>
                                        </span>
                                    <% } %>
                                </div>
                            <% }) %>
                        </div>
                        
                        
                    
                        <div class="order-summary">
                            <h4>Order Summary</h4>
                            <div class="summary-row">
                                <span>Subtotal:</span>
                                <span style="font-weight: bold;"><%=order.subTotal %></span>
                            </div>
                            <div class="summary-row">
                                <span>Shipping:</span>
                                <span style="font-weight: bold;">₹0</span>
                            </div>
                            <div class="summary-row">
                                <span>savings:</span>
                                <span style="font-weight: bold;">₹<%= order.savings %></span>
                            </div>
                            <% if(order.couponDiscount) {%>
                                <div class="summary-row">
                                    <span>Coupon Discount:</span>
                                    <span style="font-weight: bold;">₹ <%= order.couponDiscount %></span>
                                </div>
                                <% } %>

                            <div class="summary-row summary-total">
                                <span>Grand Total:</span>
                                <span>₹<%=order.totalAmount%></span>

                            </div>
                        </div>
                    
                        <% if (order.orderStatus === 'Delivered') { %>
                            <!-- Return Button -->
                             <div style="display: flex; justify-content: space-between;">

                            <button id="returnOrderBtn" class="btn btn btn-warning" onclick="returnOrder('<%= order._id %>')">Return</button>
                            <button id="downloadInvoice" class="btn btn-info" onclick="downloadInvoice('<%= order._id %>')">Download invoice</button>
                        </div>
                        <% } else if (order.orderStatus === 'Failed') { %> 
                            <!-- Cancel Order Button -->
                            <button id="paymentRetryBtn" class="btn btn-info" onclick="PaymentRetry('<%= order._id%>')">Continue Payment</button>
                        <% } else { %>
                            <button id="cancelOrderBtn" class="btn btn-cancel" onclick="orderCancel('<%= order._id %>')">Cancel Order</button>
                            <% } %>
                    </div>

                
</main>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    

async function orderCancel(orderId) {
  const result = await Swal.fire({
    title: 'Are you sure?',
    text: "Do you really want to cancel this order? This action cannot be undone.",
    icon: 'warning',
    showCancelButton: true,
    confirmButtonColor: '#e53e3e', // Red color for cancel confirmation
    cancelButtonColor: '#48bb78', // Green color for the cancel button
    confirmButtonText: 'Yes, Cancel it!',
    cancelButtonText: 'No, Keep it'
  });

  if (result.isConfirmed) {
    // Show modal for cancellation reason
    const { value: reason } = await Swal.fire({
            title: 'Cancellation Reason',
            input: 'text',
            inputPlaceholder: 'Enter your reason for cancellation...',
            showCancelButton: true,
            confirmButtonText: 'Submit',
            cancelButtonText: 'Cancel',
            inputValidator: (value) => {
                if (!value) {
                    return 'You need to write something!';
                }
            }
        });

        if(reason){
          try {
             const response = await fetch(`/beats/user/cancelOrder/${orderId}`, { method: 'PATCH' ,
                headers:{
                    'Content-Type':'application/json'
                },
                body:JSON.stringify({reason})
             });

              if (!response.ok) {
                const errorMessage = await response.json();
                 throw new Error(errorMessage.message || 'An error occurred..!');
           }

         await Swal.fire(
            'Cancelled!',
             'Your order has been cancelled.',
              'success'
           );

      window.location.href = '/beats/user/orders';
    } catch (error) {
      console.error('Error cancelling order:', error.message);
      Swal.fire(
        'Error!',
        error.message,
        'error'
      );
    }
   }
  }
}


// payment retry function.!

async function PaymentRetry(pendingOrderId) {
    console.log('Pending order ID:', pendingOrderId);
    
    const grandTotal = '<%= order.totalAmount %>';
    console.log('Grand Total:', grandTotal);

    Swal.fire({
        title: 'Continue payment!',
        text: 'Your previous payment attempt was unsuccessful. Do you want to try again?',
        icon: 'info',
        showCancelButton: true,
        confirmButtonText: 'Retry Payment',
        cancelButtonText: 'Cancel',
        allowOutsideClick: false
    }).then(async (result) => {
        if (result.isConfirmed) {
            try {
                // Step 1: Send a request to initiate payment retry
                const response = await fetch('/retry/payment', {
                    method: "POST",
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ pendingOrderId })
                });

                const data = await response.json();

                if (data.status === 'ok') {
                    // Step 2: Initialize Razorpay with new payment details
                    const options = {
                        key: data.key, 
                        amount: data.amount, 
                        currency: data.currency, 
                        name: 'Beats Studio', 
                        description: 'Payment Retry',
                        order_id: data.razorpayOrderId, 
                        handler: function (response) {
                            // Step 3: Handle payment success
                            fetch('/paymentCapture', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({
                                    razorpayPaymentId: response.razorpay_payment_id,
                                    razorpayOrderId: response.razorpay_order_id,
                                    razorpaySignature: response.razorpay_signature,
                                    pendingOrderId : pendingOrderId
                                })
                            })
                            .then(res => res.json())
                            .then(captureResponse => {
                                if (captureResponse.status === 'ok') {
                                    Swal.fire({
                                        icon: 'success',
                                        title: 'Payment Successful!',
                                        text: 'Your payment has been processed successfully.'
                                    }).then(() => {
                                        window.location.href = '/beats/orderSuccess'; // Redirect to success page
                                    });
                                } else {
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Payment Capture Failed!',
                                        text: 'Please contact support for assistance.'
                                    });
                                }
                            })
                            .catch(err => {
                                console.error('Error capturing payment:', err);
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error',
                                    text: 'An error occurred while capturing the payment. Please try again.'
                                });
                            });
                        },
                        prefill: {
                            name: '<%= user.name %>',
                            email: '<%= user.email %>', 
                            contact: '<%= user.phone %>' 
                        },
                        theme: {
                            color: '#3399cc' // Razorpay button color
                        }
                    };

                    // Step 4: Open Razorpay payment modal
                    const razorpay = new Razorpay(options);
                    razorpay.on('payment.failed', function (response) {
                        console.error('Payment failed!', response.error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Payment Failed',
                            text: `Reason: ${response.error.description}`,
                            footer: 'Please try again or use a different payment method.'
                        });
                    });

                    razorpay.open();
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Retry Failed!',
                        text: data.error || 'Could not initiate payment retry. Please try again.'
                    });
                }
            } catch (error) {
                console.error('An error occurred while retrying payment:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message
                });
            }
        } else if (result.isDismissed) {
            console.log('Payment attempt canceled.');
        }
    });
}

// Dowload invoice fn.
function downloadInvoice(orderId){
        console.log('OrderId', orderId)
        window.location.href = `/order/invoice/download/${orderId}`
    }

    
</script>
<%- include('../partials/user/footer') %>  